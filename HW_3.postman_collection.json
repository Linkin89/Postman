{
	"info": {
		"_postman_id": "68fe4d03-02d8-464c-8e08-23e74e26be3d",
		"name": "HW_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let Bodyresponse = JSON.parse (responseBody)\r",
							"console.log (`token =`, Bodyresponse.token)\r",
							"pm.environment.set(\"auth_token\", Bodyresponse.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Linkin",
							"type": "text"
						},
						{
							"key": "password",
							"value": "321",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"let schema = {\r",
							"    \"type\":\"object\",\r",
							"    \"properties\": {\r",
							"        \"person\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"u_age\": {\r",
							"                    \"type\": \"integer\"\r",
							"                },\r",
							"                \"u_name\": {\r",
							"                    \"type\": \"array\",\r",
							"                    \"items\": [\r",
							"                        {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        {\r",
							"                            \"type\": \"integer\"\r",
							"                        },\r",
							"                        {\r",
							"                            \"type\": \"integer\"\r",
							"                        }\r",
							"                    ]\r",
							"                },\r",
							"                \"u_salary_1_5_year\": {\r",
							"                    \"type\": \"integer\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"u_age\",\r",
							"                \"u_name\",\r",
							"                \"u_salary_1_5_year\"\r",
							"            ]\r",
							"        },\r",
							"        \"qa_salary_after_12_months\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"qa_salary_after_6_months\": {\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"start_qa_salary\": {\r",
							"            \"type\": \"integer\"\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\r",
							"        \"person\",\r",
							"        \"qa_salary_after_12_months\",\r",
							"        \"qa_salary_after_6_months\",\r",
							"        \"start_qa_salary\"\r",
							"    ]\r",
							"};\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"//'qa_salary_after_6_months': salary * 2,\r",
							"var jsonResp = pm.response.json();\r",
							"    console.log ('Request salary =', pm.environment.get(\"salary\"))\r",
							"    console.log ('Response =', jsonResp)\r",
							"pm.test(\"Salary after 6 months * 2\", function () {\r",
							"    pm.expect(jsonResp.qa_salary_after_6_months).to.eql(pm.environment.get(\"salary\")*2);\r",
							"});\r",
							"\r",
							"//'qa_salary_after_12_months': salary * 2.9,\r",
							"pm.test(\"Salary after 12 months * 2.9\", function () {\r",
							"    pm.expect(jsonResp.qa_salary_after_12_months).to.eql(pm.environment.get(\"salary\")*2.9);\r",
							"});\r",
							"\r",
							"//'u_salary_1.5_year': salary * 4\r",
							"pm.test(\"Salary after 1.5 year *4\", function () {\r",
							"    pm.expect(jsonResp.person.u_salary_1_5_year).to.eql(pm.environment.get(\"salary\")*4);\r",
							"});\r",
							"\r",
							"// 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"pm.environment.set(\"u_salary_1_5_year\", jsonResp.person.u_salary_1_5_year);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"auth_token\": \"{{auth_token}}\",\r\n    \"name\": \"{{name}}\",\r\n    \"age\": {{age}},\r\n    \"salary\": {{salary}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "New_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"            \"age\": {\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"name\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"salary\": {\r",
							"                \"type\": \"array\",\r",
							"                \"items\": [\r",
							"                    {\r",
							"                    \"type\": \"integer\"\r",
							"                    },\r",
							"                    {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    {\r",
							"                        \"type\": \"string\"\r",
							"                    }\r",
							"\r",
							"                ]   \r",
							"            }\r",
							"        },\r",
							"        \"required\":[\r",
							"            \"age\",\r",
							"            \"name\",\r",
							"            \"salary\"\r",
							"        ]\r",
							"};\r",
							"pm.test(\"Schema is valid\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"//  'salary': [salary, str(salary*2), str(salary*3)]}\r",
							"ResponseJSON = pm.response.json()\r",
							"RequestJSON = request.data\r",
							"console.log ('Salary response =', ResponseJSON.salary[0])\r",
							"console.log ('Salary in request =', RequestJSON.salary)\r",
							"pm.test('Salary *2 and *3', function () {\r",
							"    pm.expect(ResponseJSON.salary[0]).to.eql(+RequestJSON.salary)\r",
							"    pm.expect(+ResponseJSON.salary[1]).to.eql(RequestJSON.salary*2)\r",
							"    pm.expect(+ResponseJSON.salary[2]).to.eql(RequestJSON.salary*3)\r",
							"});\r",
							"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"tests[\"Salary[2] more than salary[1]\"] = ResponseJSON.salary[2] > ResponseJSON.salary[1]\r",
							"tests[\"Salary[2] more than salary[0]\"] = ResponseJSON.salary[2] > ResponseJSON.salary[0]\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"{\r",
							"    var schema = {\r",
							"    \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"};\r",
							"pm.test(\"Schema is valid\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "80",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		}
	]
}