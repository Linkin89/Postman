{
	"info": {
		"_postman_id": "a79249a5-d70e-4128-b969-e493858715a2",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Type of response is string\", function () {\r",
							"pm.expect(pm.response.text()).to.be.an(\"string\");\r",
							"//     pm.response.to.have.header(\"Content-Type\",'text/html; charset=utf-8');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//  Статус код 200\r",
							"pm.test(\"Status ok\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"//  Спарсить response body в json.\r",
							"var respoBody = JSON.parse(responseBody);\r",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"console.log(\"Name in response:\", respoBody.name);\r",
							"var requBody = request.data;\r",
							"console.log (\"=========\", requBody)\r",
							"console.log(\"Name in request:\", requBody.name);\r",
							"pm.test(\"Name in response = Name in request\", function () {\r",
							"pm.expect(respoBody.name).equal(requBody.name)\r",
							"});\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"var respoAge = respoBody.age\r",
							"var requAge = requBody.age\r",
							"console.log (\"Age in response\", respoAge)\r",
							"console.log (\"Age in request\", requAge)\r",
							"pm.test (\"Age in response = age in request\", function () {\r",
							"    pm.expect(respoAge).equal(requAge)\r",
							"})\r",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"// var requSalary = parseInt (requBody.salary)\r",
							"// var respoSalary = respoBody.salary\r",
							"console.log (\"Salary in request\", requBody.salary)\r",
							"console.log (\"Salary in response\", respoBody.salary)\r",
							"pm.test (\"Salary in request = salary in response\", function (){\r",
							"    pm.expect(parseInt (requBody.salary)).equal(respoBody.salary)\r",
							"    console.log (`Type of salary in request =`, typeof(\"type of salary\",parseInt (requBody.salary)))\r",
							"    \r",
							"})\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log (\"Family in response = \", respoBody.family)\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"var respoSalary_1_5 = respoBody.family.u_salary_1_5_year\r",
							"console.log (\"u_salary_1_5_year = \", respoSalary_1_5)\r",
							"pm.test (\"u_salary_1_5_year in response = salary *4\", function (){\r",
							"    pm.expect(respoBody.family.u_salary_1_5_year).equal(parseInt (requBody.salary)*4)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "10000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json\r",
							"var Bodyresponse = JSON.parse(responseBody)\r",
							"console.log (\"Bodyresponse = \", Bodyresponse)\r",
							"// 4. Спарсить request.\r",
							"var Bodyrequest = pm.request.toJSON().url.query\r",
							"console.log (\"Request parse\", Bodyrequest)\r",
							"console.log (\"==============================================================\")\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"console.log (\"Name in response =\", Bodyresponse.name)\r",
							"console.log (\"Name in request =\", Bodyrequest[0].value)\r",
							"pm.test(\"Name in response = name in request\", function (){\r",
							"    pm.expect(Bodyresponse.name).eql(Bodyrequest[0].value)\r",
							"})\r",
							"console.log (\"==============================================================\")\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"var Ageresponse = Bodyresponse.age\r",
							"console.log (\"Age in response = \", Ageresponse)\r",
							"console.log (\"Age in request = \", Bodyresponse.age)\r",
							"pm.test (\"Age in request eql Age in response\", function (){\r",
							"    pm.expect(Ageresponse).eql(Bodyresponse.age)\r",
							"})\r",
							"console.log (\"==============================================================\")\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"console.log(\"Salary in response = \", Bodyresponse.salary)\r",
							"console.log(\"Salary in request\", +Bodyrequest[2].value)\r",
							"pm.test(\"Salary in response eql salary in request\", function (){\r",
							"    pm.expect(Bodyresponse.salary).eql(+Bodyrequest[2].value)\r",
							"})\r",
							"console.log (\"==============================================================\")\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(\"Family in response = \", Bodyresponse.family)\r",
							"console.log (\"==============================================================\")\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog has param name\", function () {\r",
							"  pm.expect(Bodyresponse.family.pets.dog).have.property('name');\r",
							"});\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test (\"Dog has param age\", function () {\r",
							"    pm.expect(Bodyresponse.family.pets.dog).have.property(`age`)\r",
							"})\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test (\"Dog param `name` = Luky\", function () {\r",
							"    pm.expect(Bodyresponse.family.pets.dog.name).eql(`Luky`)\r",
							"})\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog param `age` = 4\", function () {\r",
							"    pm.expect(Bodyresponse.family.pets.dog.age).eql(4)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name={{name}}&age=32&salary=10000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "10000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json.\r",
							"let Bodyreponse = JSON.parse(responseBody)\r",
							"console.log (\"Bodyresponse = \", Bodyreponse)\r",
							"console.log (\"==============================================================\")\r",
							"// Спарсить request.\r",
							"var Bodyrequest = pm.request.toJSON().url.query\r",
							"console.log (\"Bodyrequest = \", Bodyrequest)\r",
							"console.log (\"==============================================================\")\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test (\"Name from request = name from response\", function () {\r",
							"    pm.expect(Bodyreponse.name).eql(Bodyrequest[0].value)\r",
							"    console.log(Bodyreponse.name,)\r",
							"    console.log(Bodyrequest[0].value)\r",
							"})\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test (`Age from response = Age from request`, function () {\r",
							"    pm.expect(Bodyreponse.age).eql(+Bodyrequest[1].value)\r",
							"   })\r",
							"console.log (\"==============================================================\")\r",
							"// Вывести в консоль параметр salary из request.\r",
							"console.log (`Salary from request to console = ` + Bodyrequest[2].value)\r",
							"console.log (\"==============================================================\")\r",
							"// Вывести в консоль параметр salary из response.\r",
							"console.log (\"Salary from response to console = \" + Bodyreponse.salary)\r",
							"console.log (\"==============================================================\")\r",
							"// Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log (`salary 0 element from response = `, Bodyreponse.salary[0])\r",
							"console.log (\"==============================================================\")\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log (\"Salary 1st element from response = \", Bodyreponse.salary[1])\r",
							"console.log (\"==============================================================\")\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log (`Salary 2nd element from response = `, Bodyreponse.salary[2])\r",
							"console.log (\"==============================================================\")\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test (\"0 element salary from response = 0 element salary request\", function () {\r",
							"    pm.expect(Bodyreponse.salary[0]).eql(+Bodyrequest[2].value)\r",
							"})\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test (`1st element salary response = salary*2 request`, function () {\r",
							"    pm.expect(+Bodyreponse.salary[1]).eql(Bodyrequest[2].value*2)\r",
							"})\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test (`2nd element salary response = salary*3 request`, function () {\r",
							"    pm.expect(+Bodyreponse.salary[2]).eql(Bodyrequest[2].value*3)\r",
							"})\r",
							"// Создать в окружении переменную name\r",
							"// Создать в окружении переменную age\r",
							"// Создать в окружении переменную salary\r",
							"// Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", `Vadim_Prokhnitskiy`);\r",
							"// Передать в окружение переменную age\r",
							"pm.environment.set(`age`, 32)\r",
							"// Передать в окружение переменную salary\r",
							"pm.environment.set(`salary`, 10000)\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"var Salary = Bodyreponse.salary\r",
							"for (var money in Salary) {\r",
							"  console.log(\"Salary.\" + money + \" = \" + Salary[money]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name={{name}}&age=32&salary=10000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "10000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"let Bodyresponse = JSON.parse (responseBody)\r",
							"console.log (`Response body = `, Bodyresponse)\r",
							"console.log (\"==============================================================\")\r",
							"// 7. Спарсить request.\r",
							"let Bodyrequest = request.data\r",
							"console.log (`Ruquest data = `, Bodyrequest)\r",
							"console.log (\"==============================================================\")\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test (`JSON response have param \"start_qa_salary\"`, function () {\r",
							"    pm.expect(Bodyresponse).have.property(`start_qa_salary`)\r",
							"})\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test (`JSON response have param \"qa_salary_after_6_months\"`, function () {\r",
							"    pm.expect(Bodyresponse).have.property(`qa_salary_after_6_months`)\r",
							"})\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test (`JSON response have param \"qa_salary_after_12_months\"`, function () {\r",
							"    pm.expect(Bodyresponse).have.property(`qa_salary_after_12_months`)\r",
							"})\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test (`JSON response have param \"qa_salary_after_1.5_year\"`, function () {\r",
							"    pm.expect(Bodyresponse).have.property(`qa_salary_after_1.5_year`)\r",
							"})\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test (`JSON response have param \"qa_salary_after_3.5_years\"`, function () {\r",
							"    pm.expect(Bodyresponse).have.property(`qa_salary_after_3.5_years`)\r",
							"})\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test (`JSON response have param \"person\"`, function () {\r",
							"    pm.expect(Bodyresponse).have.property(`person`)\r",
							"})\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test (`Param \"start_qa_salary\" = \"salary\" from request`, function () {\r",
							"    pm.expect(Bodyresponse.start_qa_salary).eql(+Bodyrequest.salary)\r",
							"})\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test (`Param \"qa_salary_after_6_months\" = \"salary*2\" from request`, function () {\r",
							"    pm.expect(Bodyresponse.qa_salary_after_6_months).eql(+Bodyrequest.salary*2)\r",
							"})\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test (`Param \"qa_salary_after_12_months\" = \"salary*2.7\" from request`, function () {\r",
							"    pm.expect(Bodyresponse.qa_salary_after_12_months).eql(+Bodyrequest.salary*2.7)\r",
							"})\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test (`Param \"qa_salary_after_1.5_year\" = \"salary*3.3\" from request`, function () {\r",
							"    pm.expect(Bodyresponse['qa_salary_after_1.5_year']).eql(+Bodyrequest.salary*3.3)\r",
							"})\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test (`Param \"qa_salary_after_3.5_year\" = \"salary*3.8\" from request`, function () {\r",
							"    pm.expect(Bodyresponse['qa_salary_after_3.5_years']).eql(Bodyrequest.salary*3.8)\r",
							"})\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test (`1st param in U-name in Person = salary from request`, function () {\r",
							"    pm.expect(Bodyresponse.person.u_name[1]).eql(+Bodyrequest.salary)\r",
							"})\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test (`Param u_age = age from request`, function () {\r",
							"    pm.expect(Bodyresponse.person.u_age).eql(+Bodyrequest.age)\r",
							"})\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test (`Param u_salary_5_years = salary*4.2 from request`, function () {\r",
							"    pm.expect(Bodyresponse.person.u_salary_5_years).eql(+Bodyrequest.salary*4.2)\r",
							"})\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"let person = Bodyresponse.person\r",
							"for (let elems in person) {\r",
							"  console.log(\"Element \" + elems)\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}