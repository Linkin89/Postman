{
	"info": {
		"_postman_id": "74a68286-4aa0-4709-9b3b-e9670c7bc310",
		"name": "Ksendzov",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18547129"
	},
	"item": [
		{
			"name": "HW_1",
			"item": [
				{
					"name": "EP_1",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/get_method?name={{name}}&age={{age}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"get_method"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}"
								},
								{
									"key": "age",
									"value": "{{age}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_2",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_3",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/object_info_1?name={{name}}&age={{age}}&weight=87",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_1"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}"
								},
								{
									"key": "age",
									"value": "{{age}}"
								},
								{
									"key": "weight",
									"value": "87"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_4",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_2?name={{name}}&age={{age}}&salary={{salary}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_2"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}"
								},
								{
									"key": "age",
									"value": "{{age}}"
								},
								{
									"key": "salary",
									"value": "{{salary}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_5",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}"
								},
								{
									"key": "age",
									"value": "{{age}}"
								},
								{
									"key": "salary",
									"value": "{{salary}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}"
								},
								{
									"key": "age",
									"value": "{{age}}"
								},
								{
									"key": "salary",
									"value": "{{salary}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_7",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_2",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HW_2",
			"item": [
				{
					"name": "First",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body is string\", function () {\r",
									"    pm.expect(pm.response.text()).a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/first",
							"host": [
								"{{url}}"
							],
							"path": [
								"first"
							]
						}
					},
					"response": []
				},
				{
					"name": "User_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  Статус код 200 - в папке\r",
									"\r",
									"//  Спарсить response body в json.\r",
									"let respoBody = pm.response.json();\r",
									"\r",
									"// Проверить, что name в ответе равно name s request (name вбить руками.)\r",
									"pm.test(\"Name in response = Name in request\", function () {\r",
									"    pm.expect(respoBody.name).eql(\"Vadim_Prokhnitskiy\")\r",
									"});\r",
									"\r",
									"// Проверить, что age в ответе равно age s request (age вбить руками.)\r",
									"pm.test (\"Age in response = age in request\", function () {\r",
									"    pm.expect(+respoBody.age).equal(34)\r",
									"})\r",
									"\r",
									"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
									"pm.test (\"Salary in request = salary in response\", function (){\r",
									"    pm.expect(+respoBody.salary).equal(10000)   \r",
									"})\r",
									"\r",
									"// Вывести в консоль параметр family из response.\r",
									"console.log (\"Family in response = \", respoBody.family)\r",
									"\r",
									"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
									"requestBody = pm.request.body.formdata.toObject()\r",
									"pm.test (\"u_salary_1_5_year in response = salary *4\", function (){\r",
									"    pm.expect(respoBody.family.u_salary_1_5_year).eql((+requestBody.salary)*4)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_3",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Object_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Статус код 200 - в папке\r",
									"\r",
									"// Спарсить response body в json\r",
									"var Bodyresponse = pm.response.json()\r",
									"\r",
									"// 4. Спарсить request.\r",
									"var request = pm.request.url.query.toObject()\r",
									"console.log (\"Request parse = \", request)\r",
									"\r",
									"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"Name in response == name in request\", function (){\r",
									"    pm.expect(Bodyresponse.name).eql(request.name)\r",
									"})\r",
									"\r",
									"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"var ageResponse = Bodyresponse.age\r",
									"var ageRequest = request.age \r",
									"pm.test (\"Age in request eql age in response\", function (){\r",
									"    pm.expect(ageResponse).eql(ageRequest)\r",
									"})\r",
									"\r",
									"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"var ageResponse = Bodyresponse.salary\r",
									"var ageRequest = +request.salary \r",
									"pm.test(\"Salary in response eql salary in request\", function (){\r",
									"    pm.expect(Bodyresponse.salary).eql(+request.salary)\r",
									"})\r",
									"\r",
									"// 8. Вывести в консоль параметр family из response.\r",
									"console.log(\"Family in response = \", Bodyresponse.family)\r",
									"\r",
									"// 9. Проверить, что у параметра dog есть параметры name.\r",
									"pm.test(\"Dog has param 'name'\", function () {\r",
									"  pm.expect(Bodyresponse.family.pets.dog).have.property('name');\r",
									"});\r",
									"\r",
									"// 10. Проверить, что у параметра dog есть параметры age.\r",
									"pm.test (\"Dog has param age\", function () {\r",
									"    pm.expect(Bodyresponse.family.pets.dog).have.property(`age`)\r",
									"})\r",
									"\r",
									"// 11. Проверить, что параметр name имеет значение Luky.\r",
									"pm.test (\"Dog param `name` == Luky\", function () {\r",
									"    pm.expect(Bodyresponse.family.pets.dog.name).eql(`Luky`)\r",
									"})\r",
									"\r",
									"// 12. Проверить, что параметр age имеет значение 4.\r",
									"pm.test(\"Dog param `age` == 4\", function () {\r",
									"    pm.expect(Bodyresponse.family.pets.dog.age).eql(4)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}"
								},
								{
									"key": "age",
									"value": "{{age}}"
								},
								{
									"key": "salary",
									"value": "{{salary}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Object_info_4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Статус код 200 - в папке\r",
									"\r",
									"// Спарсить response body в json.\r",
									"let Bodyreponse = pm.response.json()\r",
									"\r",
									"// Спарсить request.\r",
									"let Bodyrequest = pm.request.url.query.toObject()\r",
									"\r",
									"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test (\"Name from request == name from response\", function () {\r",
									"    pm.expect(Bodyreponse.name).eql(Bodyrequest.name)\r",
									"})\r",
									"\r",
									"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
									"pm.test (`Age from response == Age from request`, function () {\r",
									"    pm.expect(Bodyreponse.age).eql(+Bodyrequest.age)\r",
									"   })\r",
									"\r",
									"// Вывести в консоль параметр salary из request.\r",
									"console.log (`Salary from request to console = `, Bodyrequest.salary)\r",
									"\r",
									"// Вывести в консоль параметр salary из response.\r",
									"console.log (\"Salary from response to console = \", Bodyreponse.salary)\r",
									"\r",
									"// Вывести в консоль 0-й элемент параметра salary из response.\r",
									"console.log (`salary 0 element from response = `, Bodyreponse.salary[0])\r",
									"\r",
									"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
									"console.log (\"Salary 1st element from response = \", Bodyreponse.salary[1])\r",
									"\r",
									"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
									"console.log (`Salary 2nd element from response = `, Bodyreponse.salary[2])\r",
									"\r",
									"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
									"pm.test (\"0 element salary from response == 0 element salary request\", function () {\r",
									"    pm.expect(Bodyreponse.salary[0]).eql(+Bodyrequest.salary)\r",
									"})\r",
									"\r",
									"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
									"pm.test (`1st element salary response == salary*2 request`, function () {\r",
									"    pm.expect(+Bodyreponse.salary[1]).eql(Bodyrequest.salary*2)\r",
									"})\r",
									"\r",
									"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
									"pm.test (`2nd element salary response == salary*3 request`, function () {\r",
									"    pm.expect(+Bodyreponse.salary[2]).eql(Bodyrequest.salary*3)\r",
									"})\r",
									"// Создать в окружении переменную name\r",
									"pm.environment.set(\"name\")\r",
									"\r",
									"// Создать в окружении переменную age\r",
									"pm.environment.set(`age`)\r",
									"\r",
									"// Создать в окружении переменную salary\r",
									"pm.environment.set(`salary`)\r",
									"\r",
									"// Передать в окружение переменную name\r",
									"pm.environment.set(\"name\", `Vadim_Prokhnitskiy`)\r",
									"\r",
									"// Передать в окружение переменную age\r",
									"pm.environment.set(`age`, 34)\r",
									"\r",
									"// Передать в окружение переменную salary\r",
									"pm.environment.set(`salary`, 10000)\r",
									"\r",
									"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
									"let Salary = Bodyreponse.salary\r",
									"for (let i in Salary) {\r",
									"  console.log(`Salary[${i}] == ${Salary[i]}`);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}"
								},
								{
									"key": "age",
									"value": "{{age}}"
								},
								{
									"key": "salary",
									"value": "{{salary}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User_info_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Вставить параметр salary из окружения в request\r",
									"// 2. Вставить параметр age из окружения в age\r",
									"// 3. Вставить параметр name из окружения в name\r",
									"// 4. Отправить запрос.\r",
									"// 5. Статус код 200 - в папке\r",
									"\r",
									"// 6. Спарсить response body в json.\r",
									"let Bodyresponse = pm.response.json()\r",
									"console.log (`Response body = `, Bodyresponse)\r",
									"\r",
									"// 7. Спарсить request.\r",
									"let Bodyrequest = request.data\r",
									"console.log (`Ruquest body = `, Bodyrequest)\r",
									"\r",
									"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
									"pm.test (`JSON response have param \"start_qa_salary\"`, function () {\r",
									"    pm.expect(Bodyresponse).have.property(`start_qa_salary`)\r",
									"})\r",
									"\r",
									"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
									"pm.test (`JSON response have param \"qa_salary_after_6_months\"`, function () {\r",
									"    pm.expect(Bodyresponse).have.property(`qa_salary_after_6_months`)\r",
									"})\r",
									"\r",
									"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
									"pm.test (`JSON response have param \"qa_salary_after_12_months\"`, function () {\r",
									"    pm.expect(Bodyresponse).have.property(`qa_salary_after_12_months`)\r",
									"})\r",
									"\r",
									"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
									"pm.test (`JSON response have param \"qa_salary_after_1.5_year\"`, function () {\r",
									"    pm.expect(Bodyresponse).have.property(`qa_salary_after_1.5_year`)\r",
									"})\r",
									"\r",
									"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
									"pm.test (`JSON response have param \"qa_salary_after_3.5_years\"`, function () {\r",
									"    pm.expect(Bodyresponse).have.property(`qa_salary_after_3.5_years`)\r",
									"})\r",
									"\r",
									"// 13. Проверить, что json response имеет параметр person\r",
									"pm.test (`JSON response have param \"person\"`, function () {\r",
									"    pm.expect(Bodyresponse).have.property(`person`)\r",
									"})\r",
									"\r",
									"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
									"pm.test (`Param \"start_qa_salary\" == \"salary\" from request`, function () {\r",
									"    pm.expect(Bodyresponse.start_qa_salary).eql(+Bodyrequest.salary)\r",
									"})\r",
									"\r",
									"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
									"pm.test (`Param \"qa_salary_after_6_months\" == \"salary*2\" from request`, () => {\r",
									"    pm.expect(Bodyresponse.qa_salary_after_6_months).eql(+Bodyrequest.salary*2)\r",
									"})\r",
									"\r",
									"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
									"pm.test (`Param \"qa_salary_after_12_months\" == \"salary*2.7\" from request`, function () {\r",
									"    pm.expect(Bodyresponse.qa_salary_after_12_months).eql(+Bodyrequest.salary*2.7)\r",
									"})\r",
									"\r",
									"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
									"pm.test (`Param \"qa_salary_after_1.5_year\" == \"salary*3.3\" from request`, function () {\r",
									"    pm.expect(Bodyresponse['qa_salary_after_1.5_year']).eql(+Bodyrequest.salary*3.3)\r",
									"})\r",
									"\r",
									"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
									"pm.test (`Param \"qa_salary_after_3.5_year\" == \"salary*3.8\" from request`, function () {\r",
									"    pm.expect(Bodyresponse['qa_salary_after_3.5_years']).eql(Bodyrequest.salary*3.8)\r",
									"})\r",
									"\r",
									"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
									"pm.test (`1st param in U-name in Person == salary from request`, function () {\r",
									"    pm.expect(Bodyresponse.person.u_name[1]).eql(+Bodyrequest.salary)\r",
									"})\r",
									"\r",
									"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
									"pm.test (`Param u_age = age from request`, function () {\r",
									"    pm.expect(Bodyresponse.person.u_age).equal(+Bodyrequest.age)\r",
									"})\r",
									"\r",
									"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
									"pm.test (`Param u_salary_5_years = salary*4.2 from request`, function () {\r",
									"    pm.expect(Bodyresponse.person.u_salary_5_years).eql(+Bodyrequest.salary*4.2)\r",
									"})\r",
									"\r",
									"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
									"let person = Bodyresponse.person\r",
									"for (let i in person) {\r",
									"  console.log(\"Element: \" + i)\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_2",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"pm.expect(pm.response.code).eql(200)",
							"})"
						]
					}
				}
			]
		},
		{
			"name": "HW_3",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let Bodyresponse = pm.response.json()\r",
									"\r",
									"pm.collectionVariables.set(\"auth_token\", Bodyresponse.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "login",
									"value": "Linkin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "321",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1) Статус код 200 - в папке\r",
									"\r",
									"// 2) Проверка структуры json в ответе.\r",
									"let schema = {\r",
									"    \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"person\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"u_age\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"u_name\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {\r",
									"            \"type\": [\r",
									"              \"string\", \"integer\"\r",
									"            ]\r",
									"          }\r",
									"        },\r",
									"        \"u_salary_1_5_year\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"u_age\",\r",
									"        \"u_name\",\r",
									"        \"u_salary_1_5_year\"\r",
									"      ]\r",
									"    },\r",
									"    \"qa_salary_after_12_months\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"qa_salary_after_6_months\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"start_qa_salary\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"person\",\r",
									"    \"qa_salary_after_12_months\",\r",
									"    \"qa_salary_after_6_months\",\r",
									"    \"start_qa_salary\"\r",
									"  ]\r",
									"}\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"let jsonResp = pm.response.json();\r",
									"pm.test(\"Salary after 6 months * 2\", function () {\r",
									"    pm.expect(jsonResp.qa_salary_after_6_months).to.eql(pm.collectionVariables.get(\"salary\")*2);\r",
									"});\r",
									"\r",
									"//'qa_salary_after_12_months': salary * 2.9,\r",
									"pm.test(\"Salary after 12 months * 2.9\", function () {\r",
									"    pm.expect(jsonResp.qa_salary_after_12_months).to.eql(pm.collectionVariables.get(\"salary\")*2.9);\r",
									"});\r",
									"\r",
									"//'u_salary_1.5_year': salary * 4\r",
									"pm.test(\"Salary after 1.5 year *4\", function () {\r",
									"    pm.expect(jsonResp.person.u_salary_1_5_year).to.eql(pm.collectionVariables.get(\"salary\")*4);\r",
									"});\r",
									"\r",
									"// 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
									"const postRequest = {\r",
									"  url: 'http://162.55.220.72:5005/get_test_user',\r",
									"  method: 'POST',\r",
									"  body: {\r",
									"    mode: \"formdata\",\r",
									"    formdata: \r",
									"        {key: \"salary\", \"value\": jsonResp.person.u_salary_1_5_year}\r",
									"    }\r",
									"  }\r",
									";\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"auth_token\": \"{{auth_token}}\",\r\n    \"name\": \"{{name}}\",\r\n    \"age\": {{age}},\r\n    \"salary\": {{salary}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/user_info",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "New_data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1) Статус код 200 - в папке\r",
									"\r",
									"// 2) Проверка структуры json в ответе.\r",
									"let schema = {\r",
									"    \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"age\": {\r",
									"                \"type\": \"integer\"\r",
									"            },\r",
									"            \"name\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"salary\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\":\r",
									"                    {\r",
									"                    \"type\": [\"integer\", \"string\"]\r",
									"                    }   \r",
									"            }\r",
									"        },\r",
									"        \"required\":[\r",
									"            \"age\",\r",
									"            \"name\",\r",
									"            \"salary\"\r",
									"        ]\r",
									"};\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"//  'salary': [salary, str(salary*2), str(salary*3)]}\r",
									"ResponseJSON = pm.response.json()\r",
									"RequestJSON = request.data\r",
									"\r",
									"for (let i = 0, a = 1; i < ResponseJSON.salary.length; i++, a++) {\r",
									"    pm.test(`Test salary[${i}]`, () => {\r",
									"        pm.expect(+ResponseJSON.salary[i]).eql(RequestJSON.salary*a)\r",
									"        })\r",
									"    }\r",
									"\r",
									"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
									"tests[\"Salary[2] more than salary[1]\"] = ResponseJSON.salary[2] > ResponseJSON.salary[1]\r",
									"tests[\"Salary[2] more than salary[0]\"] = ResponseJSON.salary[2] > ResponseJSON.salary[0]\r",
									"tests[\"Salary[2] more than salary[0] and salary[1]\"] = ResponseJSON.salary[2] > (ResponseJSON.salary[0] + ResponseJSON.salary[1])\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{auth_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/new_data",
							"host": [
								"{{url}}"
							],
							"path": [
								"new_data"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test_pet_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1) Статус код 200 - в папке\r",
									"\r",
									"// 2) Проверка структуры json в ответе.\r",
									"    let schema = {\r",
									"    \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"age\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"daily_food\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"daily_sleep\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"age\",\r",
									"    \"daily_food\",\r",
									"    \"daily_sleep\",\r",
									"    \"name\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
									"// 'daily_food':weight * 0.012,\r",
									"//'daily_sleep': weight * 2.5\r",
									"jsonResp = pm.response.json()\r",
									"jsonReq = pm.request.body.formdata.toObject()\r",
									"\r",
									"pm.test(\"Test weight * 0.012\", function() {\r",
									"    pm.expect(jsonResp.daily_food).eql(jsonReq.weight * 0.012)\r",
									"})\r",
									"\r",
									"pm.test(\"Test weight * 2.5\", function() {\r",
									"    pm.expect(jsonResp.daily_sleep).eql(jsonReq.weight * 2.5)\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "weight",
									"value": "87",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{auth_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/test_pet_info",
							"host": [
								"{{url}}"
							],
							"path": [
								"test_pet_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get_test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1) Статус код 200 - в папке\r",
									"\r",
									"// 2) Проверка структуры json в ответе.\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"age\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"family\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"children\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"              \"type\": [\r",
									"                \"string\",\r",
									"                \"integer\"\r",
									"              ]\r",
									"            }\r",
									"          }\r",
									"        },\r",
									"        \"u_salary_1_5_year\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"children\",\r",
									"        \"u_salary_1_5_year\"\r",
									"      ]\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"salary\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"age\",\r",
									"    \"family\",\r",
									"    \"name\",\r",
									"    \"salary\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema validation\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"})\r",
									"\r",
									"// 3) Проверить что занчение поля name = значению переменной name из окружения\r",
									"jsonResp = pm.response.json()\r",
									"jsonReq = pm.request.body.formdata.toObject()\r",
									"\r",
									"pm.test(\"Name in response == name in enviroment\", () => {\r",
									"    pm.expect(jsonResp.name).eql(pm.collectionVariables.get(\"name\"))\r",
									"})\r",
									"\r",
									"// 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
									"pm.test(\"Age in response == age in request\", () =>{\r",
									"    pm.expect(jsonResp.age).eql(jsonReq.age)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{auth_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/get_test_user",
							"host": [
								"{{url}}"
							],
							"path": [
								"get_test_user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Currency",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let schema = {\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"Cur_Abbreviation\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"Cur_ID\": {\r",
									"        \"type\": \"integer\"\r",
									"      },\r",
									"      \"Cur_Name\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\r",
									"      \"Cur_Abbreviation\",\r",
									"      \"Cur_ID\",\r",
									"      \"Cur_Name\"\r",
									"    ]\r",
									"  }\r",
									"}\r",
									"\r",
									"pm.test(\"Schema validation\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"})\r",
									"\r",
									"var rand = Math.floor(Math.random() * pm.response.json().length);\r",
									"\r",
									"pm.collectionVariables.set(\"random_currency_id\", rand)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "auth_token",
									"value": "{{auth_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://54.157.99.22:80/currency",
							"protocol": "http",
							"host": [
								"54",
								"157",
								"99",
								"22"
							],
							"port": "80",
							"path": [
								"currency"
							]
						}
					},
					"response": []
				},
				{
					"name": "Curr_byn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Тесты:\r",
									"// 1) Статус код 200 - в папке\r",
									"\r",
									"// 2) Проверка структуры json в ответе.\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"Cur_Abbreviation\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Cur_ID\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"Cur_Name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Cur_OfficialRate\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"Cur_Scale\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"Date\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"Cur_Abbreviation\",\r",
									"    \"Cur_ID\",\r",
									"    \"Cur_Name\",\r",
									"    \"Cur_OfficialRate\",\r",
									"    \"Cur_Scale\",\r",
									"    \"Date\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema validation\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"})\r",
									"\r",
									"// 1) получить список валют\r",
									"auth_token = pm.collectionVariables.get(\"auth_token\")\r",
									"\r",
									"const request_currency = {\r",
									"  url: 'http://54.157.99.22:80/currency',\r",
									"  method: 'POST',\r",
									"  body: {\r",
									"    mode: \"formdata\",\r",
									"    formdata: \r",
									"        {key: \"auth_token\", \"value\": auth_token}\r",
									"    }\r",
									"  }\r",
									";\r",
									"\r",
									"pm.sendRequest(request_currency, (err, resp) => {\r",
									"    console.log(resp.json())\r",
									"    pm.collectionVariables.set(\"response_currency\", JSON.stringify(resp.json()))\r",
									"    \r",
									"})\r",
									"\r",
									"// 2) итерировать список валют\r",
									"response_currency = JSON.parse(pm.collectionVariables.get(\"response_currency\"))\r",
									"\r",
									"for (i of response_currency) {\r",
									"    console.log(`Итерируем: валюта ${i.Cur_Name}`)\r",
									"    pm.sendRequest({\r",
									"                url: \"http://54.157.99.22:80/curr_byn\",\r",
									"                method: \"POST\",\r",
									"                body: {\r",
									"                    mode: \"formdata\",\r",
									"                    formdata:\r",
									"                    [{key: \"auth_token\", \"value\": auth_token},\r",
									"                    {key: \"curr_code\", \"value\": `${i.Cur_ID}`}]\r",
									"                }\r",
									"            }, (err, resp) => {\r",
									"                if (resp.code == 500) {\r",
									"                    \r",
									"                }else if (resp.code == 200) {           \r",
									"                    // console.log(`Курс ${[resp.json().Cur_Name]} составляет: ${[resp.json().Cur_OfficialRate]}`)\r",
									"                    if (pm.expect(resp.json()).to.have.property(\"Cur_OfficialRate\")){\r",
									"                        console.log(resp.json())\r",
									"                    }\r",
									"                }\r",
									"        })\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{auth_token}}",
									"type": "text"
								},
								{
									"key": "curr_code",
									"value": "{{random_currency_id}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://54.157.99.22:80/curr_byn",
							"protocol": "http",
							"host": [
								"54",
								"157",
								"99",
								"22"
							],
							"port": "80",
							"path": [
								"curr_byn"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "name",
			"value": "Vadimko",
			"type": "string"
		},
		{
			"key": "age",
			"value": "34",
			"type": "string"
		},
		{
			"key": "salary",
			"value": "10000",
			"type": "string"
		},
		{
			"key": "url",
			"value": "162.55.220.72:5005",
			"type": "string"
		},
		{
			"key": "auth_token",
			"value": ""
		},
		{
			"key": "random_currency_id",
			"value": ""
		}
	]
}